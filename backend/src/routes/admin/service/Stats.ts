import type { FastifyReply } from 'fastify';
import type { RequestWithUser } from '../../../structures/interfaces';

import { cachedStats, getStats, keyOrder, Type } from '../../../utils/StatsGenerator';

export const options = {
	url: '/admin/service/statistics',
	method: 'get',
	middlewares: ['auth', 'admin']
};

export const run = async (req: RequestWithUser, res: FastifyReply) => {
	// Generate all stats categories, without forcing any
	// In practice, this will only generate "system" and "service" categories on-demand,
	// because the others would have been generated by scheduler
	// Consult StatsCategory.ts route for per-category on-demand refresh
	await getStats();

	// Ensures object payload has its keys matching the required ordering
	let ordered: { [index: string]: any } = {};
	ordered = keyOrder.reduce((acc, k) => {
		acc[k] = {
			...cachedStats[k]?.cache,
			meta: {
				cached: Boolean(cachedStats[k]?.cache),
				generatedOn: cachedStats[k]?.generatedOn,
				type: Type.HIDDEN
			}
		};
		return acc;
	}, ordered);

	return res.send({ statistics: ordered });
};
